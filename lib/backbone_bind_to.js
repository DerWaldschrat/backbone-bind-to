// Generated by CoffeeScript 1.3.1

/*
 Backbone Handlebars

 Author: Radoslav Stankov
 Project site: https://github.com/RStankov/backbone-bind-to
 Licensed under the MIT License.
*/


(function() {
  var BackboneView, BindToView, bindTo, root, unbindFrom,
    __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  root = this;

  BackboneView = root.Backbone.View;

  bindTo = function(object, events) {
    var eventName, methodName, _results;
    _results = [];
    for (eventName in events) {
      methodName = events[eventName];
      if (!this[methodName]) {
        throw new Error("Method " + methodName + " does not exists");
      }
      if (typeof this[methodName] !== 'function') {
        throw new Error("" + methodName + " is not a function");
      }
      _results.push(object.on(eventName, this[methodName], this));
    }
    return _results;
  };

  unbindFrom = function(object, events) {
    var eventName, methodName, _results;
    _results = [];
    for (eventName in events) {
      methodName = events[eventName];
      _results.push(object.off(eventName, this[methodName], this));
    }
    return _results;
  };

  BindToView = (function(_super) {

    __extends(BindToView, _super);

    BindToView.name = 'BindToView';

    function BindToView() {
      BindToView.__super__.constructor.apply(this, arguments);
      if (this.model) {
        bindTo.call(this, this.model, this.bindToModel);
      }
      if (this.collection) {
        bindTo.call(this, this.collection, this.bindToCollection);
      }
    }

    BindToView.prototype.remove = function() {
      BindToView.__super__.remove.apply(this, arguments);
      if (this.model) {
        this.model.off(null, null, this);
      }
      if (this.collection) {
        return this.collection.off(null, null, this);
      }
    };

    return BindToView;

  })(BackboneView);

  Backbone.BindTo = {
    VERSION: '1.0.0',
    noConflict: function() {
      root.Backbone.View = BackboneView;
      return BindToView;
    },
    View: BindToView
  };

  root.Backbone.View = Backbone.BindTo.View;

}).call(this);
