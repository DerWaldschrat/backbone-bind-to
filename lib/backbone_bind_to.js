// Generated by CoffeeScript 1.3.1
(function() {
  var __hasProp = {}.hasOwnProperty,
    __extends = function(child, parent) { for (var key in parent) { if (__hasProp.call(parent, key)) child[key] = parent[key]; } function ctor() { this.constructor = child; } ctor.prototype = parent.prototype; child.prototype = new ctor; child.__super__ = parent.prototype; return child; };

  Backbone.BindTo = {};

  Backbone.BindTo.View = (function(_super) {

    __extends(View, _super);

    View.name = 'View';

    function View() {
      var eventName, methodName, _ref, _ref1;
      View.__super__.constructor.apply(this, arguments);
      if (this.model) {
        _ref = this.bindToModel;
        for (eventName in _ref) {
          methodName = _ref[eventName];
          if (!this[methodName]) {
            throw new Error("Method " + methodName + " does not exists");
          }
          if (typeof this[methodName] !== 'function') {
            throw new Error("" + methodName + " is not a function");
          }
          this.model.on(eventName, this[methodName], this);
        }
      }
      if (this.collection) {
        _ref1 = this.bindToCollection;
        for (eventName in _ref1) {
          methodName = _ref1[eventName];
          if (!this[methodName]) {
            throw new Error("Method " + methodName + " does not exists");
          }
          if (typeof this[methodName] !== 'function') {
            throw new Error("" + methodName + " is not a function");
          }
          this.collection.on(eventName, this[methodName], this);
        }
      }
    }

    View.prototype.remove = function() {
      var eventName, methodName, _ref, _ref1, _results;
      View.__super__.remove.apply(this, arguments);
      if (this.model) {
        _ref = this.bindToModel;
        for (eventName in _ref) {
          methodName = _ref[eventName];
          this.model.off(eventName, this[methodName], this);
        }
      }
      if (this.collection) {
        _ref1 = this.bindToCollection;
        _results = [];
        for (eventName in _ref1) {
          methodName = _ref1[eventName];
          _results.push(this.collection.off(eventName, this[methodName], this));
        }
        return _results;
      }
    };

    return View;

  })(Backbone.View);

}).call(this);
